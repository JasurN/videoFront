{"version":3,"sources":["store/reducers/errors.js","store/reducers/messages.js","store/reducers/auth.js","store/reducers/records.js","store/reducers/recordDetails.js","store/reducers/index.js","store/actions/types.js","store/store.js","store/actions/messages.js","store/actions/auth.js","components/layout/Header.js","store/actions/records.js","components/records/RecordAddForm.js","store/actions/recordDetails.js","components/records/RecordsList.js","components/user/PersonalInfo.js","components/Main.js","components/layout/Alerts.js","helpers/index.js","components/accounts/Login.js","helpers/api.js","components/accounts/Register.js","components/common/PrivateRoute.js","store/actions/files.js","components/recordDetails/RecordDetail.js","components/accounts/ChangePassword.js","components/user/UserInfoChangeForm.js","components/user/AllUsersList.js","components/common/SuperAdminRoute.js","components/admin/DeleteRecordList.js","components/admin/DeleteRecordDetailList.js","components/departmentHead/AllDepartmentUsers.jsx","App.js","serviceWorker.js","index.js"],"names":["initialState","message","status","token","localStorage","getItem","isAuthenticated","isLoading","user","user_info","user_type","records","selectedRecord","recordDetails","combineReducers","errors","state","action","type","payload","messages","auth","userType","name","setItem","removeItem","filter","record_item","id","map","record_detail_item","middleware","thunk","store","createStore","rootReducers","composeWithDevTools","applyMiddleware","createMessage","returnErrors","tokenHeaderConfig","getState","config","headers","Header","this","props","authLinks","className","to","first_name","last_name","onClick","logout","guestLinks","data-toggle","data-target","aria-controls","aria-expanded","aria-label","href","Component","connect","dispatch","axios","post","then","catch","error","response","data","getRecords","get","res","addRecord","record_id","short_description","a","body","JSON","stringify","recordAdded","recordAlreadyExists","RecordAddForm","onSubmit","event","preventDefault","clearInputs","handleChange","e","setState","target","value","Form","Group","Input","placeholder","onChange","required","TextArea","label","Button","primary","addSelectedRecordToStory","addRecordDetail","category_id","status_id","recordDetailAdded","playRecordDetail","selectedRecordId","login","password","room_name","port","ipAddress","cameraNotWork","stopRecordDetail","record_detail_id","RecordsList","deleteConfirmOpen","MoreInfoLinkOnClickHandler","parseInt","currentTarget","parentNode","getAttribute","find","deleteRecordSubmit","confirmAlert","title","buttons","removeRecord","recordsList","identifyUserTypeAndGetRecord","console","log","Table","celled","Row","HeaderCell","Body","Divider","length","getSuperAdminRecord","getAdminRecord","getUserRecord","record","key","Cell","Date","created_at","toLocaleString","buttonRemoveAndConform","getRemoveAndConfirmButton","department","owner","negative","put","PersonalInfo","Card","style","width","Img","variant","src","profileImage","Title","Text","Main","Container","Alerts","prevProps","prevState","snapshot","alert","email","non_field_errors","username","deleteLead","success","addLead","passwordNotMatch","fillAllFields","passwordChanged","userRegistered","userNotRegistered","withAlert","makeTwoStrToLowerCaseAndConcat","firstName","lastName","toLowerCase","Login","getDepartments","getUserTypes","getSubCategories","getRoomsList","getUsersList","userItem","updateUser","user_id","room","file","FormData","append","patch","userUpdated","userNotUpdated","Register","password2","departamentSelected","userTypeSelected","roomSelected","departments_options","userTypesOptions","roomsTypesOptions","selectedFile","getSelectedItemId","roomId","newUser","register","handleDepartmentChange","handleUserOptionsChange","handleRoomOptionsChange","onSelectFileHandler","files","getDepartmentsAndSetToState","getUserTypeAndSetToState","getRoomsAndSetToState","widths","fluid","Select","options","departments_list","mapListToSelectOptions","userLists","items_list","itemsOptions","forEach","item","push","text","items","selectedItem","optionsList","component","rest","render","uploadRecordDetailFileToServer","RecordDetail","sub_category_options","subCategorySelected","componentDidMount","getRecordDetails","getSubCategoriesAndSetToState","handleCategorySelectOption","roomInfo","camera_login","camera_password","ip_address","showStopConfirm","showRemoveConfirm","removeRecordDetail","uploadVideoOnClickHandler","selectedRecordDetailId","buttonPlayAndSendVideo","positive","buttonStopAndConfirm","color","download","record_detail_status","selected_record_id","ChangePassword","oldPassword","newPassword","reNewPassword","passwords","changePassword","minLength","new_password","UserInfoChangeForm","handleClick","selected_user","bind","as","Col","controlId","Label","Control","File","custom","AllUsersList","usersListWithCards","showUsersList","showUserChangeForm","selected_user_id","goToUserProfileChange","getUsersAndSetToState","usersLists","prevDepartment","user_item","currentDepartment","CardDeck","display","flexDirection","justifyContent","flex","height","maxWidth","adminRemoveRecord","delete","DeleteRecordDetailList","getAllRecordsDetails","deleteRecordDetail","AllDepartmentUsers","alertOptions","timeout","position","App","template","AlertTemplate","exact","path","DeleteRecordList","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5be81f06.chunk.js","sourcesContent":["import {GET_ERRORS} from \"../actions/types\";\n\nconst initialState = {\n    message: {},\n    status: null\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ERRORS:\n            return {\n                message: action.payload.message,\n                status: action.payload.status\n            };\n        default:\n            return state;\n    }\n};","import { CREATE_MESSAGE} from \"../actions/types\";\n\nconst initialState = {\n\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case CREATE_MESSAGE:\n            return (state=action.payload);\n        default:\n            return state;\n    }\n};","import {\n    USER_LOADING, USER_LOADED, AUTH_ERROR,\n    LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS,\n    REGISTER_SUCCESS, REGISTER_FAIL, PASSWORD_CHANGED\n} from '../actions/types'\n\nconst initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    isLoading: false,\n    user: null,\n    user_info:null,\n    user_type:null\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case USER_LOADING:\n            return {\n                ...state,\n                isLoading: true\n            };\n        case USER_LOADED:\n            return {\n                ...state,\n                ...action.payload,\n                isAuthenticated: true,\n                isLoading: false,\n                user_type: action.payload.user_info.userType.name\n            };\n        case LOGIN_SUCCESS:\n            localStorage.setItem('token', action.payload.token);\n            return {\n                ...state,\n                ...action.payload,\n                isAuthenticated: true,\n                isLoading: false,\n                user_type: action.payload.user_info.userType.name\n            };\n        case PASSWORD_CHANGED:\n        case AUTH_ERROR:\n        case LOGIN_FAIL:\n        case LOGOUT_SUCCESS:\n            localStorage.removeItem('token');\n            return {\n                ...state,\n                token: null,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false,\n                user_type:null\n            };\n        case REGISTER_FAIL:\n        case REGISTER_SUCCESS:\n        default:\n            return state;\n    }\n}","import {ADD_RECORD, GET_RECORDS, RECORD_REMOVED_SUCCESSFULLY} from \"../actions/types\";\n\nconst initialState = {\n    records: []\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_RECORDS:\n            return {\n                ...state,\n                records: action.payload\n            };\n        case ADD_RECORD:\n            return {\n                ...state,\n                records: [...state.records, action.payload]\n            };\n        case RECORD_REMOVED_SUCCESSFULLY:\n            return {\n                ...state,\n                records: state.records\n                    .filter(record_item => record_item.id !== action.payload)\n            };\n        default:\n            return state;\n    }\n}","import {\n    ADD_RECORD_DETAIL,\n    ADD_SELECTED_RECORD_TO_STORE, FILE_UPLOAD_SUCCESSFULLY, GET_ALL_RECORD_DETAILS,\n    GET_RECORD_DETAILS,\n    RECORD_DETAIL_PLAY_SUCCESSFULLY, RECORD_DETAIL_REMOVED_SUCCESSFULLY, RECORD_DETAIL_STOP_SUCCESSFULLY\n} from \"../actions/types\"\n\nconst initialState = {\n    selectedRecord: {},\n    recordDetails: []\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ALL_RECORD_DETAILS:\n        case GET_RECORD_DETAILS:\n            return {\n                ...state,\n                recordDetails: action.payload\n            };\n        case ADD_RECORD_DETAIL:\n            return {\n                ...state,\n                recordDetails: [...state.recordDetails, action.payload]\n            };\n        case ADD_SELECTED_RECORD_TO_STORE:\n            return {\n                ...state,\n                selectedRecord: action.payload\n            };\n        case RECORD_DETAIL_PLAY_SUCCESSFULLY:\n        case FILE_UPLOAD_SUCCESSFULLY:\n        case RECORD_DETAIL_STOP_SUCCESSFULLY:\n            return {\n                ...state,\n                recordDetails: state.recordDetails.map(record_detail_item => {\n                    if (record_detail_item.id === action.payload.id) {\n                        record_detail_item = action.payload;\n                    }\n                    return record_detail_item;\n                })\n            };\n        case RECORD_DETAIL_REMOVED_SUCCESSFULLY:\n            return {\n                ...state,\n                recordDetails: state.recordDetails\n                    .filter(record_detail_item => record_detail_item.id !== action.payload)\n            };\n        default:\n            return state;\n    }\n\n};","import {combineReducers} from \"redux\";\n\nimport errors from './errors';\nimport messages from \"./messages\";\nimport auth from './auth'\nimport records from \"./records\";\nimport recordDetails from \"./recordDetails\"\nexport default combineReducers({\n    errors,\n    messages,\n    auth,\n    records,\n    recordDetails,\n});","//leads\nexport const ADD_LEAD = \"ADD_LEAD\";\nexport const DELETE_LEAD = \"DELETE_LEAD\";\nexport const GET_LEADS = \"GET_LEADS\";\n\n//errors header\nexport const GET_ERRORS = \"GET_ERRORS\";\n//messages header\nexport const CREATE_MESSAGE = \"CREATE_MESSAGE\";\n\n//user\nexport const USER_LOADING = \"USER_LOADING\";\nexport const USER_LOADED = \"USER_LOADED\";\nexport const AUTH_ERROR = \"AUTH_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const PASSWORD_CHANGED = \"PASSWORD_CHANGED\";\n\n//record\nexport const ADD_RECORD_FAIL = \"ADD_RECORD_FAIL\";\nexport const GET_RECORDS = \"GET_RECORDS\";\nexport const ADD_RECORD = \"ADD_RECORD\";\nexport const RECORD_REMOVED_SUCCESSFULLY = \"RECORD_REMOVED_SUCCESSFULLY\";\n\n//record details\nexport const ADD_SELECTED_RECORD_TO_STORE = \"ADD_SELECTED_RECORD_TO_STORE\";\nexport const GET_RECORD_DETAILS = \"GET_RECORD_DETAILS\";\nexport const GET_ALL_RECORD_DETAILS = 'GET_ALL_RECORD_DETAILS';\nexport const ADD_RECORD_DETAIL = \"ADD_RECORD_DETAIL\";\nexport const ADD_RECORD_DETAIL_FAIL = \"ADD_RECORD_DETAIL_FAIL\";\n\n// record detail video management\nexport const RECORD_DETAIL_PLAY_SUCCESSFULLY =  \"RECORD_DETAIL_PLAY_SUCCESSFULLY\";\nexport const RECORD_DETAIL_STOP_SUCCESSFULLY =  \"RECORD_DETAIL_STOP_SUCCESSFULLY\";\nexport const RECORD_DETAIL_REMOVED_SUCCESSFULLY =  \"RECORD_DETAIL_REMOVED_SUCCESSFULLY\";\n\n// file management\nexport const FILE_UPLOAD_SUCCESSFULLY = \"FILE_UPLOAD_SUCCESSFULLY\";\n\n","import {createStore, applyMiddleware} from \"redux\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport rootReducers from './reducers'\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducers,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;","import {CREATE_MESSAGE, GET_ERRORS} from \"./types\";\n\n// CREATE MESSAGE\nexport const createMessage = message => {\n    return {\n        type: CREATE_MESSAGE,\n        payload: message\n    }\n};\n\n// RETURN ERRORS\nexport const returnErrors = (message, status) => {\n    return {\n        type: GET_ERRORS,\n        payload: {\n            message,\n            status\n        }\n    }\n};","import axios from 'axios';\nimport {createMessage, returnErrors} from \"./messages\";\nimport {\n    USER_LOADED, USER_LOADING,\n    AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL, PASSWORD_CHANGED\n} from './types';\n\n// CHECK TOKEN & LOAD USER\nexport const loadUser = () => (dispatch, getState) => {\n    // User Loading\n    dispatch({type: USER_LOADING});\n\n    axios.get('/api/auth/user', tokenHeaderConfig(getState))\n        .then(res => {\n            dispatch({\n                type: USER_LOADED,\n                payload: res.data\n            })\n        })\n        .catch(error => {\n            dispatch(returnErrors(error.response.data,\n                error.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            });\n        })\n};\n\n// LOGIN USER\nexport const login = (username, password) => (dispatch, getState) => {\n    // Request Body\n    const body = JSON.stringify({\n        username,\n        password\n    });\n\n    axios.post('/api/auth/login', body, tokenHeaderConfig(getState))\n        .then(res => {\n            dispatch({\n                type: LOGIN_SUCCESS,\n                payload: res.data\n            })\n        })\n        .catch(error => {\n            dispatch(returnErrors(error.response.data,\n                error.response.status));\n            dispatch({\n                type: LOGIN_FAIL\n            });\n        })\n};\n\n// REGISTER USER\nexport const register = ({username, first_name, last_name,\n                             password, department, userType,\n                             room, file}) => (dispatch, getState) => {\n    // Request Body\n    const data = new FormData();\n    data.append('file', file);\n    data.append('username', username);\n    data.append('first_name', first_name);\n    data.append('last_name', last_name);\n    data.append('password', password);\n    data.append('department', department);\n    data.append('userType', userType);\n    data.append('room', room);\n\n    axios.post('/api/auth/register', data, tokenHeaderConfig(getState))\n        .then(res => {\n            dispatch(createMessage({userRegistered: 'Новый пользователь создан'}));\n            dispatch({\n                type: REGISTER_SUCCESS,\n                payload: res.data\n            })\n        })\n        .catch(error => {\n            dispatch(createMessage({userNotRegistered: 'Что-то пошло не так при регистрации'}));\n            dispatch(returnErrors(error.response.data,\n                error.response.status));\n            dispatch({\n                type: REGISTER_FAIL\n            });\n        })\n};\n\n// LOGOUT USER\nexport const logout = () => (dispatch, getState) => {\n    axios.post('/api/auth/logout/', null, tokenHeaderConfig(getState))\n        .then(() => {\n            dispatch({\n                type: LOGOUT_SUCCESS,\n            })\n        })\n        .catch(error => {\n            dispatch(returnErrors(error.response.data,\n                error.response.status));\n        })\n};\n\nexport const changePassword = ({username ,oldPassword, newPassword}) => (dispatch, getState) => {\n    const body = JSON.stringify({\n        username,\n        password: oldPassword,\n        new_password: newPassword\n    });\n\n    axios.put('/api/auth/user', body, tokenHeaderConfig(getState))\n        .then(() => {\n            dispatch(createMessage({passwordChanged: 'Пароль изменен'}));\n            dispatch({\n                type: PASSWORD_CHANGED\n            });\n        })\n        .catch(error => {\n            dispatch(returnErrors(error.response.data,\n                error.response.status));\n\n        })\n};\n\n// Setup config with token - helper function\nexport const tokenHeaderConfig = getState => {\n\n    // Get token from state\n    const token = getState().auth.token;\n\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    if (token) {\n        config.headers['Authorization'] = `Token ${token}`;\n    }\n\n    return config;\n};","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { logout } from \"../../store/actions/auth\";\n\nclass Header extends Component {\n    static propTypes = {\n        auth: PropTypes.object.isRequired,\n        logout: PropTypes.func\n    };\n\n    render() {\n        const { isAuthenticated, user, user_info } = this.props.auth;\n        const authLinks = (\n            <ul className=\"navbar-nav ml-auto mt-1 mt-lg-0\">\n                {user_info ? (user_info.userType.id === 1 && (\n                    <>\n                        <li className=\"nav-item\">\n                            <Link to=\"/allusers\" className=\"nav-link mr-3\">Список следователей</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to=\"/deleteRecord\" className=\"nav-link mr-3\">Дела для удаления</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to=\"/deleteRecordDetail\" className=\"nav-link mr-3\">Файлы для удаления</Link>\n                        </li>\n                    </>\n                )) : <span />\n\n                }\n                {user_info ? (user_info.userType.id === 2 && (\n                    <li className=\"nav-item\">\n                        <Link to=\"/allDepartmentUsers\" className=\"nav-link mr-3\">Список следователей</Link>\n                    </li>)) : <span />\n                }\n                <li className=\"nav-item\">\n                    <Link to=\"/changepassword\" className=\"nav-link mr-3\">Поменять пароль</Link>\n                </li>\n                {user_info ? (user_info.userType.id === 1 && (\n                    <li className=\"nav-item\">\n                        <Link to=\"/register\" className=\"nav-link mr-3\">Зарегистрировать следователя</Link>\n                    </li>)) : <span />\n                }\n                <span className=\"navbar-text mr-2\">\n                    <strong>{user ? `Вы вошли как: ${user.first_name} ${user.last_name}` : \"\"}</strong>\n                </span>\n\n                <li className=\"nav-item\">\n                    <button className=\"nav-link btn btn-primary\n                    btn-sm text-light ml-2 rounded\"\n                        onClick={this.props.logout}\n                    >Выйти\n                    </button>\n                </li>\n            </ul>\n        );\n        const guestLinks = (\n            <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\n                <li className=\"nav-item\">\n                    <Link to=\"/login\" className=\"nav-link\">Логин</Link>\n                </li>\n            </ul>\n        );\n\n        return (\n            <div>\n                <nav className=\"navbar navbar-expand-sm navbar-light bg-light\">\n\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                        data-target=\"#navbarTogglerDemo01\" aria-controls=\"navbarTogglerDemo01\"\n                        aria-expanded=\"false\"\n                        aria-label=\"Toggle navigation\">\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\n                        <a className=\"navbar-brand ml-3\" href=\"/\">Главная страница</a>\n                        {isAuthenticated ? authLinks : guestLinks}\n\n                    </div>\n                </nav>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps, { logout })(Header);","import axios from 'axios';\nimport { createMessage, returnErrors } from \"./messages\";\nimport { tokenHeaderConfig } from \"./auth\";\nimport {\n    ADD_RECORD,\n    ADD_RECORD_FAIL,\n    GET_RECORDS,\n    RECORD_REMOVED_SUCCESSFULLY\n} from \"./types\";\nimport store from \"../store\";\n\nexport const getRecords = () => (dispatch, getState) => {\n    axios.get('/api/records/', tokenHeaderConfig(getState))\n        .then(res => {\n            dispatch({\n                type: GET_RECORDS,\n                payload: res.data\n            })\n        })\n        .catch(error => dispatch(\n            returnErrors(error.response.data, error.response.status)));\n};\n\n\nexport const addRecord = async (record_id, short_description) => {\n    const body = JSON.stringify({\n        record_id,\n        short_description\n    });\n    return axios.post('/api/records/', body, tokenHeaderConfig(store.getState))\n        .then(res => {\n            store.dispatch(createMessage({ recordAdded: 'Новое дело создано' }));\n            store.dispatch({\n                type: ADD_RECORD,\n                payload: res.data\n            })\n        })\n        .catch(error => {\n            store.dispatch(createMessage({ recordAlreadyExists: 'Дело с таким ID  уже существует' }));\n            store.dispatch({\n                type: ADD_RECORD_FAIL\n            });\n        })\n};\n\nexport const removeRecord = (record_id) => (dispatch, getState) => {\n    axios.put(`/api/records/${record_id}/`, tokenHeaderConfig(getState))\n        .then(() => {\n            dispatch({\n                type: RECORD_REMOVED_SUCCESSFULLY,\n                payload: record_id\n            })\n        })\n        .catch(error => dispatch(\n            returnErrors(error.response.data, error.response.status)));\n};\n\nexport const adminRemoveRecord = (record_id) => (dispatch, getState) => {\n    axios.delete(`/api/records/${record_id}/`, tokenHeaderConfig(getState))\n        .then(() => {\n            dispatch({\n                type: RECORD_REMOVED_SUCCESSFULLY,\n                payload: record_id\n            })\n        })\n        .catch(error => dispatch(\n            returnErrors(error.response.data, error.response.status)));\n};","import React, { Component } from 'react'\nimport { Form } from 'semantic-ui-react'\nimport { addRecord } from \"../../store/actions/records\";\n\nclass RecordAddForm extends Component {\n    state = {\n        record_id: '',\n        short_description: ''\n    };\n\n    render() {\n        const { record_id, short_description } = this.state;\n        return (\n            <Form onSubmit={this.onSubmit}>\n                <h2>Создать дело</h2>\n                <Form.Group>\n                    <Form.Input name=\"record_id\" className=\"deloInput\"\n                        placeholder='Напишите пожалуйста ID дело'\n                        onChange={this.handleChange}\n                        value={record_id}\n                        required\n                    />\n                </Form.Group>\n                <Form.TextArea name=\"short_description\" label='Короткое описание'\n                    placeholder='Напишите пожалуйста короткое описание дела'\n                    value={short_description} onChange={this.handleChange} />\n                <Form.Button primary>Создать</Form.Button>\n            </Form>\n        )\n    }\n\n    onSubmit = async event => {\n        event.preventDefault();\n        const { record_id, short_description } = this.state;\n        await addRecord(record_id, short_description);\n        this.clearInputs();\n    };\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    };\n\n    clearInputs() {\n        this.setState({\n            record_id: '',\n            short_description: ''\n        })\n    }\n}\n\nexport default RecordAddForm;","import {\n    ADD_RECORD_DETAIL,\n    ADD_RECORD_DETAIL_FAIL,\n    ADD_SELECTED_RECORD_TO_STORE, GET_ALL_RECORD_DETAILS,\n    GET_RECORD_DETAILS,\n    RECORD_DETAIL_PLAY_SUCCESSFULLY,\n    RECORD_DETAIL_REMOVED_SUCCESSFULLY,\n    RECORD_DETAIL_STOP_SUCCESSFULLY\n} from \"./types\";\nimport axios from 'axios';\nimport {tokenHeaderConfig} from \"./auth\";\nimport {createMessage, returnErrors} from \"./messages\";\nimport store from \"../store\";\n\nexport const addSelectedRecordToStory = (selectedRecord) => (dispatch) => {\n    dispatch({\n        type: ADD_SELECTED_RECORD_TO_STORE,\n        payload: selectedRecord\n    })\n};\n\nexport const getAllRecordsDetails = () => (dispatch, getState) => {\n    axios.get('/api/records/details/', tokenHeaderConfig(getState))\n        .then(res => {\n            dispatch({\n                type: GET_ALL_RECORD_DETAILS,\n                payload: res.data\n            })\n        })\n        .catch(error => dispatch(\n            returnErrors(error.response.data, error.response.status)));\n};\n\nexport const getRecordDetails = (selected_record_id) => (dispatch, getState) => {\n    axios.get(`/api/records/details/${selected_record_id}`, tokenHeaderConfig(getState))\n        .then(res => {\n            dispatch({\n                type: GET_RECORD_DETAILS,\n                payload: res.data\n            })\n        })\n        .catch(error => dispatch(\n            returnErrors(error.response.data, error.response.status)));\n};\n\nexport const addRecordDetail = (record_id, short_description, category_id) => {\n    const status_id = 1;\n    const body = JSON.stringify({\n        record_id,\n        status_id,\n        short_description,\n        category_id\n    });\n    return axios.post('/api/records/details/', body, tokenHeaderConfig(store.getState))\n        .then(res => {\n            store.dispatch({\n                type: ADD_RECORD_DETAIL,\n                payload: res.data\n            });\n            store.dispatch(createMessage({recordDetailAdded: 'Подкатегория создана'}));\n        })\n        .catch(error => {\n            store.dispatch(returnErrors(error.response.data,\n                error.response.status));\n            store.dispatch({\n                type: ADD_RECORD_DETAIL_FAIL\n            });\n        })\n};\n\nexport const playRecordDetail = ({\n                                     selectedRecordId, login, password,\n                                     room_name, port, ipAddress\n                                 }) => (dispatch, getState) => {\n    const body = JSON.stringify({\n        login,\n        password,\n        room_name,\n        port,\n        ipAddress,\n    });\n    axios.post(`/api/records/details/${selectedRecordId}/play/`, body, tokenHeaderConfig(getState))\n        .then(res => {\n            dispatch({\n                type: RECORD_DETAIL_PLAY_SUCCESSFULLY,\n                payload: res.data\n            })\n        })\n        .catch(error => {\n            dispatch(\n                returnErrors(error.response.data, error.response.status));\n            dispatch(createMessage({cameraNotWork: 'Камера не работает'}));\n        });\n};\n\nexport const stopRecordDetail = (record_detail_id) => (dispatch, getState) => {\n    axios.get(`/api/records/details/${record_detail_id}/stop/`, tokenHeaderConfig(getState))\n        .then(res => {\n            dispatch({\n                type: RECORD_DETAIL_STOP_SUCCESSFULLY,\n                payload: res.data\n            })\n        })\n        .catch(error => dispatch(\n            returnErrors(error.response.data, error.response.status)));\n};\n\nexport const removeRecordDetail = (record_detail_id) => (dispatch, getState) => {\n    axios.get(`/api/records/details/${record_detail_id}/remove/`, tokenHeaderConfig(getState))\n        .then(() => {\n            dispatch({\n                type: RECORD_DETAIL_REMOVED_SUCCESSFULLY,\n                payload: record_detail_id\n            })\n        })\n        .catch(error => dispatch(\n            returnErrors(error.response.data, error.response.status)));\n};\n\nexport const deleteRecordDetail = (record_detail_id) => (dispatch, getState) => {\n    axios.put(`/api/records/details/${record_detail_id}/remove/`, tokenHeaderConfig(getState))\n        .then(() => {\n            dispatch({\n                type: RECORD_DETAIL_REMOVED_SUCCESSFULLY,\n                payload: record_detail_id\n            })\n        })\n        .catch(error => dispatch(\n            returnErrors(error.response.data, error.response.status)));\n};","import React, {Component} from 'react'\nimport {Button, Divider, Table} from 'semantic-ui-react'\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {getRecords, removeRecord} from \"../../store/actions/records\";\nimport {Link} from \"react-router-dom\";\nimport {addSelectedRecordToStory} from \"../../store/actions/recordDetails\";\nimport {confirmAlert} from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\n\nclass RecordsList extends Component {\n    state = {\n        deleteConfirmOpen: false,\n        selectedRecordId: -1\n    };\n\n    static propTypes = {\n        records: PropTypes.array.isRequired,\n        user_type: PropTypes.string.isRequired,\n        user_info: PropTypes.object.isRequired,\n        getRecords: PropTypes.func,\n        addSelectedRecordToStory: PropTypes.func,\n        removeRecord: PropTypes.func\n    };\n\n    componentDidMount() {\n        this.props.getRecords();\n    }\n\n    render() {\n        const recordsList = this.identifyUserTypeAndGetRecord();\n        const {user_type} = this.props;\n        console.log(user_type);\n        return (\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>ID дела</Table.HeaderCell>\n                        <Table.HeaderCell>Краткое описание</Table.HeaderCell>\n                        <Table.HeaderCell>Создатель дела</Table.HeaderCell>\n                        <Table.HeaderCell>Дата создания</Table.HeaderCell>\n                        <Table.HeaderCell>Подробнее</Table.HeaderCell>\n\n                        {/*<Table.HeaderCell>Действия</Table.HeaderCell>*/}\n                   {user_type === 'Супер Админ'?'': <Table.HeaderCell>Действия</Table.HeaderCell>}\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {recordsList}\n                </Table.Body>\n                <Divider/>\n            </Table>\n\n        )\n    }\n\n    MoreInfoLinkOnClickHandler = (event) => {\n        const selectedRecordId = parseInt(event.currentTarget.parentNode.getAttribute(\"record_id\"));\n        const selectedRecord = this.props.records.find(record_item =>\n            record_item.id === selectedRecordId);\n        this.props.addSelectedRecordToStory(selectedRecord);\n    };\n\n    identifyUserTypeAndGetRecord() {\n        const {records, user_type} = this.props;\n        if (records.length > 0 && user_type) {\n            if (user_type === \"Супер Админ\") {\n                return this.getSuperAdminRecord();\n            } else if (user_type === \"Начальник отдела\") {\n                return this.getAdminRecord();\n            } else if (user_type === \"Следователь\") {\n                return this.getUserRecord();\n            }\n        }\n    }\n\n    getSuperAdminRecord() {\n        return this.props.records.map(record => {\n            if (record.status === 'a') {\n                return (\n                    <Table.Row key={record.id}>\n                        <Table.Cell>\n                            {record.record_id}\n                        </Table.Cell>\n                        <Table.Cell>\n                            {record.short_description}\n                        </Table.Cell>\n                        <Table.Cell>\n                            {`${record.first_name} ${record.last_name}`}\n                        </Table.Cell>\n                        <Table.Cell>\n                            {new Date(record.created_at).toLocaleString('ru-RU')}\n                        </Table.Cell>\n                        <Table.Cell record_id={record.id}>\n                            <Link onClick={this.MoreInfoLinkOnClickHandler} to=\"/detail\">Подробнее</Link>\n                        </Table.Cell>\n                    </Table.Row>)\n            }\n            return <Table.Row/>;\n        })\n    }\n\n    getAdminRecord() {\n        const buttonRemoveAndConform = this.getRemoveAndConfirmButton();\n        return this.props.records.map(record => {\n            if (record.department === this.props.user_info.department.name && record.status === 'a') {\n                return (\n                    <Table.Row key={record.id}>\n                        <Table.Cell>\n                            {record.record_id}\n                        </Table.Cell>\n                        <Table.Cell>\n                            {record.short_description}\n                        </Table.Cell>\n                        <Table.Cell>\n                            {`${record.first_name} ${record.last_name}`}\n                        </Table.Cell>\n                        <Table.Cell>\n                            {new Date(record.created_at).toLocaleString('ru-RU')}\n                        </Table.Cell>\n                        <Table.Cell record_id={record.id}>\n                            <Link onClick={this.MoreInfoLinkOnClickHandler} to=\"/detail\">Подробнее</Link>\n                        </Table.Cell>\n                        <Table.Cell record_id={record.id}>\n                            {this.props.user && this.props.user.id === record.owner && (buttonRemoveAndConform)}\n                        </Table.Cell>\n                    </Table.Row>)\n            }\n            return <Table.Row/>;\n        })\n    }\n\n    getUserRecord() {\n        const buttonRemoveAndConform = this.getRemoveAndConfirmButton();\n        return this.props.records.map(record => {\n            if (record.owner === this.props.user.id && record.status === 'a') {\n                return (\n                    <Table.Row key={record.id}>\n                        <Table.Cell>\n                            {record.record_id}\n                        </Table.Cell>\n                        <Table.Cell>\n                            {record.short_description}\n                        </Table.Cell>\n                        <Table.Cell>\n                            {`${record.first_name} ${record.last_name}`}\n                        </Table.Cell>\n                        <Table.Cell>\n                            {new Date(record.created_at).toLocaleString('ru-RU')}\n                        </Table.Cell>\n                        <Table.Cell record_id={record.id}>\n                            <Link onClick={this.MoreInfoLinkOnClickHandler} to=\"/detail\">Подробнее</Link>\n                        </Table.Cell>\n                        <Table.Cell record_id={record.id}>\n                            {buttonRemoveAndConform}\n                        </Table.Cell>\n                    </Table.Row>)\n            }\n            return <Table.Row/>;\n        })\n\n    }\n\n    getRemoveAndConfirmButton() {\n        return (<Button negative onClick={this.deleteRecordSubmit}>Удалить Дело</Button>);\n    }\n\n    deleteRecordSubmit = (event) => {\n        const selectedRecordId =\n            parseInt(event.currentTarget.parentNode.getAttribute(\"record_id\"));\n        this.setState({selectedRecordId: selectedRecordId});\n        confirmAlert({\n            title: 'Удаление дела',\n            message: 'Вы действительно хотите удалить дело?',\n            buttons: [\n                {\n                    label: 'Да',\n                    onClick: () => {\n                        const selectedRecordId = this.state.selectedRecordId;\n                        this.props.removeRecord(selectedRecordId);\n                    }\n                },\n                {\n                    label: 'Нет',\n                    onClick: () => {\n                    }\n                }\n            ]\n        });\n    };\n\n}\n\nconst mapStateToProps = state => ({\n    records: state.records.records,\n    user_type: state.auth.user_type,\n    user_info: state.auth.user_info,\n    user: state.auth.user\n});\nexport default connect(mapStateToProps, {getRecords, addSelectedRecordToStory, removeRecord})(RecordsList);\n","import React, {Component} from 'react';\nimport {Card, Container} from \"react-bootstrap\";\nimport {connect} from 'react-redux';\n\nclass PersonalInfo extends Component {\n    static propTypes = {};\n\n    render() {\n        const {isAuthenticated, user, user_info, user_type} = this.props.auth;\n        localStorage.setItem('department', user_info.department.name);\n        return (\n            <div className=' mt-2'>\n                {isAuthenticated ? (\n                        <Container>\n                            <Card style={{width: '15em'}} className=\"text-right\">\n                                <Card.Img className=\"profileImage\" variant=\"top\"\n\n                                          src={user_info ? user_info.profileImage : <div/>}/>\n                                <Card.Body>\n                                    <Card.Title>{\n                                        user ? `${user.first_name} ${user.last_name}` :\n                                            <div/>}</Card.Title>\n                                    <Card.Text>{user_info && user_type && user_type !== 'Супер Админ' ?\n                                        user_info.department.name :\n                                        <div/>}</Card.Text>\n                                    <Card.Text>{user_info ? user_info.userType.name : <div/>}</Card.Text>\n                                </Card.Body>\n                            </Card>\n                        </Container>\n                    )\n                    :\n                    <div/>}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\nexport default connect(mapStateToProps, null)(PersonalInfo);\n","import React, {Component} from 'react';\nimport {Container, Divider} from \"semantic-ui-react\";\nimport RecordAddForm from \"./records/RecordAddForm\";\nimport RecordsList from \"./records/RecordsList\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport PersonalInfo from \"./user/PersonalInfo\";\n\nclass Main extends Component{\n    static propTypes = {\n        auth: PropTypes.object.isRequired,\n    };\n\n    render() {\n        const {user_info} = this.props.auth;\n\n        return (\n            <div>\n                 <PersonalInfo/>\n                <Container>\n\n                    {user_info ? (user_info.userType.id !== 1 && ( <RecordAddForm/>)) : <span/>}\n                    <Divider/>\n                    <h3>Существующие дела</h3>\n                    <RecordsList/>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps, )(Main);","import React, {Component, Fragment} from 'react';\nimport {withAlert} from \"react-alert\";\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Alerts extends Component {\n    static propTypes = {\n        error: PropTypes.object.isRequired,\n        message: PropTypes.object.isRequired\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const {error, alert, message} = this.props;\n        if (error !== prevProps.error) {\n            if (error.message.name) {\n                alert.error(`Name: ${error.message.name}`);\n            }\n            if (error.message.email) {\n                alert.error(`Email: ${error.message.email}`);\n            }\n            if (error.message.message) {\n                alert.error(`Message: ${error.message.message}`);\n            }\n            if (error.message.non_field_errors) {\n                alert.error(error.message.non_field_errors);\n            }\n            if (error.message.username) {\n                alert.error(error.message.username);\n            }\n\n        }\n        if (message !== prevProps.message) {\n            if (message.deleteLead) {\n                alert.success(message.deleteLead)\n            }\n            if (message.addLead) {\n                alert.success(message.addLead)\n            }\n            if (message.passwordNotMatch) {\n                alert.error(message.passwordNotMatch);\n            }\n            if (message.fillAllFields) {\n                alert.error(message.fillAllFields);\n            }\n            if (message.passwordChanged) {\n                alert.success(message.passwordChanged);\n            }\n            if (message.userRegistered) {\n                alert.success(message.userRegistered);\n            }\n            if (message.recordAdded) {\n                alert.success(message.recordAdded);\n            }\n            if (message.recordAlreadyExists) {\n                alert.error(message.recordAlreadyExists);\n            }\n            if (message.userNotRegistered) {\n                alert.success(message.userNotRegistered);\n            }\n            if (message.cameraNotWork) {\n                alert.error(message.cameraNotWork);\n            }\n        }\n    }\n\n    render() {\n        return <Fragment/>\n    }\n}\n\nconst mapStateToProps = state => ({\n    error: state.errors,\n    message: state.messages\n});\n\nexport default connect(mapStateToProps)(withAlert()(Alerts));","export const makeTwoStrToLowerCaseAndConcat = (firstName, lastName) => {\n    return `${firstName.toLowerCase()}${lastName.toLowerCase()}`;\n};\n\nexport const makeTwoStrToLowerCaseAndConcatAndAddSlash = (firstName, lastName) => {\n    return `${firstName.toLowerCase()}/${lastName.toLowerCase()}`;\n};\n\n","import React, {Component} from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {login} from \"../../store/actions/auth\";\nimport PropTypes from \"prop-types\";\nimport {makeTwoStrToLowerCaseAndConcat} from \"../../helpers\";\n\nclass Login extends Component {\n    state = {\n        firstName: '',\n        lastName: '',\n        password: '',\n    };\n\n    static propTypes = {\n        login: PropTypes.func.isRequired,\n        isAuthenticated: PropTypes.bool\n    };\n\n    onSubmit = event => {\n        event.preventDefault();\n        const username = makeTwoStrToLowerCaseAndConcat(this.state.firstName, this.state.lastName);\n        this.props.login(username, this.state.password);\n        this.setState({\n            password: '',\n        });\n    };\n\n    onChange = event => this.setState({\n        [event.target.name]: event.target.value\n    });\n\n    render() {\n        if (this.props.isAuthenticated) {\n            return <Redirect to=\"/\"/>\n        }\n        const {firstName, lastName, password} = this.state;\n        return (\n            <div className=\"col-md-4 m-auto\">\n                <div className=\"card card-body mt-2\">\n\n                    <h2 className=\"text-center\">Войти в аккаунт</h2>\n                    <form onSubmit={this.onSubmit}>\n                        <div className=\"form-group\">\n                            <label>Имя*</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                name=\"firstName\"\n                                onChange={this.onChange}\n                                value={firstName}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Фамилия*</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                name=\"lastName\"\n                                onChange={this.onChange}\n                                value={lastName}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Пароль*</label>\n                            <input\n                                type=\"password\"\n                                className=\"form-control\"\n                                name=\"password\"\n                                onChange={this.onChange}\n                                value={password}\n                                required={true}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <div className=\"text-center\">\n                                <button type=\"submit\" className=\"btn btn-primary\">\n                                    Логин\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps, {login})(Login);","import {tokenHeaderConfig} from \"../store/actions/auth\";\nimport {createMessage, returnErrors} from \"../store/actions/messages\";\nimport axios from 'axios';\nimport store from \"../store/store\";\n\nexport const getDepartments = async () => {\n    return axios.get('api/records/departments', tokenHeaderConfig(store.getState))\n        .then(res => {\n            return res.data;\n        })\n        .catch(error => store.dispatch(\n            returnErrors(error.response.data, error.response.status)));\n};\n\nexport const getUserTypes = async () => {\n    return axios.get('api/auth/userTypes', tokenHeaderConfig(store.getState))\n        .then(res => {\n            return res.data;\n        })\n        .catch(error => store.dispatch(\n            returnErrors(error.response.data, error.response.status)));\n};\n\nexport const getSubCategories = async () => {\n    return axios.get('api/records/categories', tokenHeaderConfig(store.getState))\n        .then(res => {\n            return res.data;\n        })\n        .catch(error => store.dispatch(\n            returnErrors(error.response.data, error.response.status)));\n};\n\nexport const getRoomsList = async () => {\n    return axios.get('api/records/rooms', tokenHeaderConfig(store.getState))\n        .then(res => {\n            return res.data;\n        })\n        .catch(error => store.dispatch(\n            returnErrors(error.response.data, error.response.status)));\n};\n\nexport const getUsersList = async () => {\n    return axios.get('api/auth/users', tokenHeaderConfig(store.getState))\n        .then(res => {\n            return res.data.filter(userItem => (userItem.userType !== \"Супер Админ\"));\n        })\n        .catch(error => store.dispatch(\n            returnErrors(error.response.data, error.response.status)));\n};\n\nexport const updateUser = async ({\n                                     user_id,username, first_name, last_name,\n                                     password, department, userType,\n                                     room, file\n                                 }) => {\n    debugger;\n    const data = new FormData();\n    if (file) {\n        data.append('file', file);\n    }\n    if (password.length > 0) {\n        data.append('password', password);\n    }\n    data.append('username', username);\n    data.append('user_id', user_id);\n    data.append('first_name', first_name);\n    data.append('last_name', last_name);\n    data.append('department', department);\n    data.append('userType', userType);\n    data.append('room', room);\n    return axios.patch('/api/auth/users', data, tokenHeaderConfig(store.getState))\n        .then(() => {\n            store.dispatch(createMessage({userUpdated: 'Данные пользователя обновлены'}));\n            return true;\n        })\n        .catch(error => {\n            store.dispatch(createMessage({userNotUpdated: 'Что-то пошло не так при обновлении'}));\n            store.dispatch(returnErrors(error.response.data,\n                error.response.status));\n            return false;\n        })\n};","import React, {Component} from 'react'\nimport {Container, Divider, Form} from 'semantic-ui-react'\nimport {connect} from 'react-redux';\nimport {makeTwoStrToLowerCaseAndConcat} from \"../../helpers\";\nimport {getDepartments, getRoomsList, getUserTypes} from \"../../helpers/api\";\nimport {register} from \"../../store/actions/auth\";\nimport {createMessage} from \"../../store/actions/messages\";\nimport PropTypes from \"prop-types\";\nimport {Redirect} from \"react-router-dom\";\n\nclass Register extends Component {\n    state = {\n        firstName: '',\n        lastName: '',\n        password: '',\n        password2: '',\n        departamentSelected: '',\n        userTypeSelected: '',\n        roomSelected: '',\n        departments_options: [],\n        userTypesOptions: [],\n        roomsTypesOptions: [],\n        selectedFile: ''\n    };\n\n    static propTypes = {\n        register: PropTypes.func.isRequired,\n        isAuthenticated: PropTypes.bool,\n        getDepartments: PropTypes.func.isRequired,\n        getUserTypes: PropTypes.func.isRequired\n    };\n\n    async componentDidMount() {\n        this.getDepartmentsAndSetToState();\n        this.getUserTypeAndSetToState();\n        this.getRoomsAndSetToState();\n    }\n\n    render() {\n        if (!this.props.isAuthenticated) {\n            return <Redirect to=\"/login/\"/>\n        }\n        const {firstName, lastName, password, password2} = this.state;\n        return (\n            <Container>\n                <Divider/>\n                <Form onSubmit={this.onSubmit}>\n                    <h2 className=\"text-center\">Регистрация нового пользователя</h2>\n                    <Form.Group widths='equal'>\n                        <Form.Input name=\"firstName\" fluid label='Имя' placeholder='Имя'\n                                    value={firstName} onChange={this.onChange}\n                                    required/>\n                        <Form.Input name=\"lastName\" fluid label='Фамилия' placeholder='Фамилия'\n                                    value={lastName} onChange={this.onChange}\n                                    required/>\n\n                        <Form.Input type=\"file\"\n                            name=\"photoProfile\" fluid label='Фото Профиля'\n                                    placeholder='Фото Профиля' onChange={this.onSelectFileHandler}\n                                    required/>\n                    </Form.Group>\n                    <Form.Group widths='equal'>\n                        <Form.Input type=\"password\" name=\"password\" fluid label='Пароль'\n                                    placeholder='Пароль' value={password} onChange={this.onChange}\n                                    required/>\n                        <Form.Input type=\"password\" name=\"password2\" fluid label='Повторите Пароль'\n                                    placeholder='Повторите Пароль' value={password2} onChange={this.onChange}\n                                    required/>\n                    </Form.Group>\n                    <Form.Group widths='equal'>\n                        <Form.Select\n                            fluid\n                            label='Департамент'\n                            options={this.state.departments_options}\n                            onChange={this.handleDepartmentChange}\n                            required\n                        />\n                        <Form.Select\n                            fluid\n                            label='Тип пользователя'\n                            name=\"options\"\n                            options={this.state.userTypesOptions}\n                            onChange={this.handleUserOptionsChange}\n                            required\n                        />\n                        <Form.Select\n                            fluid\n                            label='Кабинет следователя'\n                            options={this.state.roomsTypesOptions}\n                            onChange={this.handleRoomOptionsChange}\n                            required\n                        />\n                    </Form.Group>\n                    <Divider/>\n                    <div className=\"form-group text-center\">\n                        <button type=\"submit\" className=\"btn btn-success btn-lg rounded-lg\">\n                            Зарегистрировать\n                        </button>\n                    </div>\n                </Form>\n            </Container>\n        )\n    }\n\n    async getDepartmentsAndSetToState() {\n        await getDepartments()\n            .then(departments_list => {\n                this.setState({\n                    departments_options: this.mapListToSelectOptions(departments_list)\n                });\n            });\n    }\n\n    async getUserTypeAndSetToState() {\n        await getUserTypes()\n            .then(userLists => {\n                this.setState({\n                    userTypesOptions: this.mapListToSelectOptions(userLists)\n                })\n            })\n    }\n\n    async getRoomsAndSetToState() {\n        await getRoomsList()\n            .then(userLists => {\n                this.setState({\n                    roomsTypesOptions: this.mapListToSelectOptions(userLists)\n                })\n            })\n    }\n\n    mapListToSelectOptions(items_list) {\n        let itemsOptions = [];\n        items_list.forEach(item => itemsOptions.push({\n            key: item.id,\n            text: item.name,\n            value: item.name\n        }));\n        return itemsOptions.filter(items => items.text !== \"Супер Админ\");\n    }\n\n    onSubmit = event => {\n        event.preventDefault();\n        const {password, password2, firstName, lastName, departamentSelected,\n            userTypeSelected, roomSelected, selectedFile} = this.state;\n        if (password !== password2) {\n            this.props.createMessage({passwordNotMatch: \"Пароли не совпадают\"})\n        } else {\n            if (departamentSelected === '' || userTypeSelected === ''\n                || roomSelected === '') {\n                this.props.createMessage({fillAllFields: \"Заполните все поля\"});\n                return;\n            }\n            const department = this.getSelectedItemId(departamentSelected, this.state.departments_options);\n            const userType = this.getSelectedItemId(userTypeSelected, this.state.userTypesOptions);\n            const roomId = this.getSelectedItemId(roomSelected, this.state.roomsTypesOptions);\n            const username = makeTwoStrToLowerCaseAndConcat(firstName, lastName);\n            const newUser = {\n                username: username,\n                first_name: firstName,\n                last_name: lastName,\n                password: password,\n                department: department,\n                userType: userType,\n                room: roomId,\n                file: selectedFile\n            };\n            this.props.register(newUser);\n            this.clearInputs();\n\n        }\n    };\n\n    getSelectedItemId(selectedItem, optionsList) {\n        return optionsList.find(item => item.text === selectedItem).key;\n    }\n\n    onChange = event => this.setState({\n        [event.target.name]: event.target.value\n    });\n\n    handleDepartmentChange = (e, {value}) => this.setState({departamentSelected: value});\n    handleUserOptionsChange = (e, {value}) => this.setState({userTypeSelected: value});\n    handleRoomOptionsChange = (e, {value}) => this.setState({roomSelected: value});\n\n    onSelectFileHandler = event => {\n        this.setState({\n            selectedFile: event.target.files[0]\n        })\n    };\n\n    clearInputs() {\n        this.setState({\n            firstName: '',\n            lastName: '',\n            password: '',\n            password2: '',\n        })\n    }\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, {register, createMessage})(Register);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {Route, Redirect} from \"react-router-dom\";\n\nconst PrivateRoute = ({component: Component, auth, ...rest}) => (\n    <Route\n        {...rest}\n        render={props => {\n            if (auth.isLoading) {\n                return <h2>Loading...</h2>\n            } else if (!auth.isAuthenticated) {\n                return <Redirect to=\"/login\"/>\n            } else {\n                return <Component {...props}/>\n            }\n        }}\n    />\n);\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);","import axios from 'axios';\nimport {tokenHeaderConfig} from \"./auth\";\nimport store from \"../store\";\nimport {returnErrors} from \"./messages\";\nimport {FILE_UPLOAD_SUCCESSFULLY} from \"./types\";\n\nexport const uploadRecordDetailFileToServer =\n    (selectedFile, record_detail_id) => (dispatch, getState) => {\n        const data = new FormData();\n        data.append('file', selectedFile);\n        data.append('record_detail', record_detail_id);\n\n        axios.post(\"/api/records/file/\", data, tokenHeaderConfig(getState), { // receive two parameter endpoint url ,form data\n        })\n            .then(res => { // then print response status\n                dispatch({\n                    type: FILE_UPLOAD_SUCCESSFULLY,\n                    payload: res.data\n                })\n            })\n            .catch(error => {\n                store.dispatch(returnErrors(error.response.data,\n                    error.response.status));\n            })\n    };","import React, {Component} from 'react';\nimport {Button, Container, Divider, Form, Input, Table} from \"semantic-ui-react\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {\n    addRecordDetail, getRecordDetails,\n    playRecordDetail, stopRecordDetail,\n    removeRecordDetail\n} from \"../../store/actions/recordDetails\";\nimport {getSubCategories} from \"../../helpers/api\";\nimport {uploadRecordDetailFileToServer} from \"../../store/actions/files\";\n\nimport '../../style/RecordDetail.css';\nimport {confirmAlert} from \"react-confirm-alert\";\n\n\nclass RecordDetail extends Component {\n    state = {\n        sub_category_options: [],\n        short_description: '',\n        subCategorySelected: '',\n        deleteConfirmOpen: false,\n        selectedRecordId: -1,\n        selectedFile: null\n    };\n\n    static propTypes = {\n        selectedRecord: PropTypes.array.isRequired,\n        recordDetails: PropTypes.array.isRequired,\n        getRecords: PropTypes.func,\n        getRecordDetails: PropTypes.func,\n        playRecordDetail: PropTypes.func,\n        stopRecordDetail: PropTypes.func,\n        removeRecordDetail: PropTypes.func,\n        auth: PropTypes.object.isRequired,\n    };\n\n    componentDidMount = async () => {\n        this.props.getRecordDetails(this.props.selectedRecord.id);\n        this.getSubCategoriesAndSetToState();\n    };\n\n    render() {\n        const {user_info, user} = this.props.auth;\n\n        const buttonPlayAndSendVideo = (\n            <div>\n                <Button\n                    positive onClick={this.playRecordDetail}>Запись Видео\n                </Button>\n                <h5>Или загрузуть файл самому</h5>\n                <Input type=\"file\" name=\"file\" onChange={this.onSelectFileHandler}\n                       className=\"marginTop5\"/>\n                <Button primary onClick={this.uploadVideoOnClickHandler}>Отправить\n                    файл</Button>\n            </div>\n        );\n\n        const buttonStopAndConfirm = (\n            <Button color=\"yellow\" onClick={this.showStopConfirm}>Стоп видео</Button>);\n\n        const buttonRemoveAndConform = (\n            <Button negative onClick={this.showRemoveConfirm}>Удалить файл</Button>);\n\n        const {selectedRecord} = this.props;\n        return (\n            <Container>\n                <Divider/>\n                <h2>Дело</h2>\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row key={selectedRecord.id}>\n                            <Table.HeaderCell>{selectedRecord.record_id}</Table.HeaderCell>\n                            <Table.HeaderCell>{selectedRecord.short_description}</Table.HeaderCell>\n                            <Table.HeaderCell> {new Date(selectedRecord.created_at).toLocaleString('ru-RU')}</Table.HeaderCell>\n                            {this.props.recordDetails.length > 0\n                                ? (<Table.HeaderCell><a\n                                    href={`http://localhost:8000/api/records/download/${selectedRecord.id}`}\n                                    download>Скачать дело\n                                </a></Table.HeaderCell>)\n                                : <div/>}\n                        </Table.Row>\n                    </Table.Header>\n                </Table>\n                <Divider/>\n                <h3>Список подкатегории</h3>\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Подкатегории</Table.HeaderCell>\n                            <Table.HeaderCell>Краткое описание</Table.HeaderCell>\n                            <Table.HeaderCell>Статус</Table.HeaderCell>\n                            <Table.HeaderCell>Дата создания</Table.HeaderCell>\n                            <Table.HeaderCell>Действия</Table.HeaderCell>\n                            <Table.HeaderCell>Ссылка для скачивания</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n\n                    {this.props.recordDetails.length > 0 ? <Table.Body>\n                        {\n                            this.props.recordDetails.map(record_detail_item => {\n                                if (record_detail_item.record_detail_status === 'a')\n                                    return (\n                                        <Table.Row key={record_detail_item.id}>\n                                            <Table.Cell>\n                                                {record_detail_item.category_id}\n                                            </Table.Cell>\n                                            <Table.Cell>\n                                                {record_detail_item.short_description}\n                                            </Table.Cell>\n                                            <Table.Cell>\n                                                {record_detail_item.status}\n                                            </Table.Cell>\n                                            <Table.Cell>\n                                                {new Date(record_detail_item.created_at).toLocaleString('ru-RU')}\n                                            </Table.Cell>\n                                            <Table.Cell record_detail_id={record_detail_item.id}>\n                                                {user_info ? (user_info.userType.id !== 1 && selectedRecord.owner === user.id && (\n                                                        <div>\n                                                            {record_detail_item.status === \"Не начато\" ?\n                                                                buttonPlayAndSendVideo\n                                                                :\n                                                                <div/>\n                                                            }\n                                                            {record_detail_item.status === \"Идет запись\" ?\n                                                                buttonStopAndConfirm\n                                                                :\n                                                                <div/>\n                                                            }\n                                                            {record_detail_item.status === \"Файл сохранен\" ?\n                                                                buttonRemoveAndConform :\n                                                                <div/>\n                                                            }\n                                                        </div>))\n                                                    : <div/>}\n\n                                            </Table.Cell>\n                                            <Table.Cell>\n                                                {record_detail_item.file ?\n                                                    <a href={`http://localhost:8000${record_detail_item.file}`}\n                                                       download>Скачать</a> :\n                                                    <div/>}\n                                            </Table.Cell>\n                                        </Table.Row>\n                                    )\n                                return <div/>\n                            })\n                        }\n                    </Table.Body> : <div/>\n                    }\n                </Table>\n                {user_info ? (user_info.userType.id !== 1 && selectedRecord.owner === user.id && (\n                    <div>\n                        <h3>Создание подкатегории</h3>\n                        <Form onSubmit={this.onSubmit}>\n                            <Form.Group>\n                                <Form.Select\n                                    label='Покатегории'\n                                    options={this.state.sub_category_options}\n                                    onChange={this.handleCategorySelectOption}\n                                    required/>\n                            </Form.Group>\n                            <Form.TextArea name=\"short_description\" label='Краткое описание'\n                                           placeholder='Напишите краткое описание дела'\n                                           value={this.state.short_description} onChange={this.handleChange}/>\n                            <Form.Button primary>Создать</Form.Button>\n                        </Form>\n                    </div>\n                )) : <span/>}\n\n            </Container>\n        );\n    }\n\n    handleCategorySelectOption = (e, {value}) => this.setState({subCategorySelected: value});\n\n    async getSubCategoriesAndSetToState() {\n        await getSubCategories()\n            .then(departments_list => {\n                this.setState({\n                    sub_category_options: this.mapListToSelectOptions(departments_list)\n                });\n            });\n    }\n\n    mapListToSelectOptions(items_list) {\n        let itemsOptions = [];\n        items_list.forEach(item => itemsOptions.push({\n            key: item.id,\n            text: item.title,\n            value: item.title\n        }));\n        return itemsOptions;\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    };\n\n    onSubmit = async event => {\n        event.preventDefault();\n        const {subCategorySelected, short_description} = this.state;\n        const record_id = this.props.selectedRecord.id;\n        const category_id = this.getSelectedItemId(subCategorySelected,\n            this.state.sub_category_options);\n        await addRecordDetail(record_id,\n            short_description, category_id);\n\n    };\n\n    getSelectedItemId(selectedItem, optionsList) {\n        return optionsList.find(item => item.text === selectedItem).key;\n    }\n\n    playRecordDetail = (event) => {\n        const selectedRecordId =\n            parseInt(event.currentTarget.parentNode.parentNode.parentNode.getAttribute(\"record_detail_id\"));\n        const login = this.props.room.camera_login;\n        const password = this.props.room.camera_password;\n        const room_name = this.props.room.name;\n        const port = this.props.room.port;\n        const ipAddress = this.props.room.ip_address;\n        const roomInfo = {\n            selectedRecordId, login, password, room_name, port, ipAddress\n        };\n\n        this.props.playRecordDetail(roomInfo);\n    };\n\n    showStopConfirm = (event) => {\n        const selectedRecordId =\n            parseInt(event.currentTarget.parentNode.parentNode.getAttribute(\"record_detail_id\"));\n        this.setState({selectedRecordId: selectedRecordId});\n        confirmAlert({\n            title: 'Стоп воспроизведения видео',\n            message: 'Остановить запись видео?',\n            buttons: [\n                {\n                    label: 'Да',\n                    onClick: () => {\n                        const selectedRecordId = this.state.selectedRecordId;\n                        this.props.stopRecordDetail(selectedRecordId);\n                    }\n                },\n                {\n                    label: 'Нет',\n                    onClick: () => {\n                    }\n                }\n            ]\n        });\n    };\n\n    showRemoveConfirm = (event) => {\n        const selectedRecordId =\n            parseInt(event.currentTarget.parentNode.parentNode.getAttribute(\"record_detail_id\"));\n        this.setState({deleteConfirmOpen: true, selectedRecordId: selectedRecordId});\n        confirmAlert({\n            title: 'Удаление записи',\n            message: 'Вы действительно хотите удалить запись?',\n            buttons: [\n                {\n                    label: 'Да',\n                    onClick: () => {\n                        const selectedRecordId = this.state.selectedRecordId;\n                        this.props.removeRecordDetail(selectedRecordId);\n                    }\n                },\n                {\n                    label: 'Нет',\n                    onClick: () => {\n                    }\n                }\n            ]\n        });\n    };\n\n    onSelectFileHandler = event => {\n        this.setState({\n            selectedFile: event.target.files[0]\n        })\n    };\n\n    uploadVideoOnClickHandler = (event) => {\n        if (this.state.selectedFile !== null) {\n            const selectedRecordDetailId =\n                parseInt(event.currentTarget.parentNode.parentNode.parentNode.getAttribute(\"record_detail_id\"));\n            this.props.uploadRecordDetailFileToServer(this.state.selectedFile, selectedRecordDetailId);\n        }\n    }\n}\n\nconst mapStateToProps = state => ({\n    selectedRecord: state.recordDetails.selectedRecord,\n    recordDetails: state.recordDetails.recordDetails,\n    room: state.auth.user_info.room,\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps,\n    {\n        getRecordDetails,\n        playRecordDetail,\n        stopRecordDetail,\n        removeRecordDetail,\n        uploadRecordDetailFileToServer\n    })(RecordDetail);","import React, {Component} from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {createMessage} from \"../../store/actions/messages\";\nimport {changePassword} from \"../../store/actions/auth\";\n\nclass ChangePassword extends Component {\n    state = {\n        oldPassword: '',\n        newPassword: '',\n        reNewPassword: '',\n    };\n\n    static propTypes = {\n        auth: PropTypes.object.isRequired,\n        isAuthenticated: PropTypes.bool,\n        changePassword: PropTypes.func.isRequired\n    };\n\n    render() {\n        if (!this.props.isAuthenticated) {\n            return <Redirect to=\"/\"/>\n        }\n        const {oldPassword, newPassword, reNewPassword} = this.state;\n        return (\n            <div className=\"col-md-6 m-auto\">\n                <div className=\"card card-body mt-2\">\n                    <h2 className=\"text-center\">Поменять пароль</h2>\n                    <form onSubmit={this.onSubmit}>\n                        <div className=\"form-group\">\n                            <label>Введите Старый Пароль</label>\n                            <input\n                                type=\"password\"\n                                className=\"form-control\"\n                                name=\"oldPassword\"\n                                onChange={this.onChange}\n                                value={oldPassword}\n                                required={true}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Введите Новый Пароль</label>\n                            <input\n                                type=\"password\"\n                                className=\"form-control\"\n                                name=\"newPassword\"\n                                onChange={this.onChange}\n                                value={newPassword}\n                                required={true}\n                                minLength={8}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Повторите Новый Пароль</label>\n                            <input\n                                type=\"password\"\n                                className=\"form-control\"\n                                name=\"reNewPassword\"\n                                onChange={this.onChange}\n                                value={reNewPassword}\n                                required={true}\n                                minLength={8}\n                                placeholder=\"это чтобы потвердить что вы ввели новый пароль правильно\"\n                            />\n                        </div>\n                        <div className=\"form-group text-center\">\n                            <button type=\"submit\" className=\"btn btn-success btn-lg rounded-lg\">\n                                Поменять Пароль\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n\n    onChange = event => this.setState({\n        [event.target.name]: event.target.value\n    });\n    onSubmit = event => {\n        event.preventDefault();\n        const {oldPassword, newPassword, reNewPassword} = this.state;\n        if (newPassword !== reNewPassword) {\n            this.props.createMessage({passwordNotMatch: \"Новые Пароли не совпадают\"})\n        } else {\n            const username = this.props.auth.user.username;\n            const passwords = {username, oldPassword, newPassword};\n            this.props.changePassword(passwords)\n        }\n    }\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    auth: state.auth\n});\nexport default connect(mapStateToProps, {createMessage, changePassword})(ChangePassword);","import React, {Component} from 'react';\nimport {Button, Col, Form} from \"react-bootstrap\";\nimport {Form as FormSemantic} from \"semantic-ui-react\";\nimport {getDepartments, getRoomsList, getUserTypes, updateUser} from \"../../helpers/api\";\nimport {makeTwoStrToLowerCaseAndConcat} from \"../../helpers\";\nimport {connect} from \"react-redux\";\nimport {createMessage} from \"../../store/actions/messages\";\n\nclass UserInfoChangeForm extends Component {\n    state = {\n        user_id: -1,\n        first_name: '',\n        last_name: '',\n        password: '',\n        password2: '',\n        departamentSelected: '',\n        userTypeSelected: '',\n        roomSelected: '',\n        departments_options: [],\n        userTypesOptions: [],\n        roomsTypesOptions: [],\n        selectedFile: ''\n    };\n\n    async componentDidMount() {\n        this.getDepartmentsAndSetToState();\n        this.getUserTypeAndSetToState();\n        this.getRoomsAndSetToState();\n        const {\n            user_id, first_name, last_name, department, room,\n            userType\n        } = this.props.selected_user;\n        this.setState({\n            user_id,\n            first_name,\n            last_name,\n            departamentSelected: department,\n            roomSelected: room,\n            userTypeSelected: userType\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Button className=\"mt-3 mb-3\"\n                        variant=\"primary\"\n                        onClick={this.props.handleClick.bind(this)}>Назад К\n                    Списку</Button>\n                <Form onSubmit={this.onSubmit}>\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"formGridFirstName\">\n                            <Form.Label>Имя</Form.Label>\n                            <Form.Control type=\"text\" value={this.state.first_name}\n                                          name=\"first_name\" onChange={this.onChange}/>\n                        </Form.Group>\n                        <Form.Group as={Col} controlId=\"formGridLastName\">\n                            <Form.Label>Фамилия</Form.Label>\n                            <Form.Control type=\"text\" value={this.state.last_name}\n                                          name=\"last_name\" onChange={this.onChange}/>\n                        </Form.Group>\n                        <Form.Group as={Col} controlId=\"formGridProfilePhoto\">\n                            <Form.Label>Фото Профиля</Form.Label>\n                            <Form.File label=\"Фото профиля\" custom onChange={this.onSelectFileHandler}/>\n                        </Form.Group>\n                    </Form.Row>\n\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"formGridNewPassword\">\n                            <Form.Label>Новый пароль</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Новый пароль\"\n                                          name=\"password\" onChange={this.onChange}/>\n                        </Form.Group>\n                        <Form.Group as={Col} controlId=\"formGridReNewPassword\">\n                            <Form.Label>Повторите Новый пароль</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Новый пароль\"\n                                          name=\"password2\" onChange={this.onChange}/>\n                        </Form.Group>\n                    </Form.Row>\n                    <FormSemantic.Group widths='equal'>\n                        <FormSemantic.Select\n                            className=\"mr-5\"\n                            fluid\n                            label='Департамент'\n                            options={this.state.departments_options}\n                            onChange={this.handleDepartmentChange}\n                            value={this.state.departamentSelected}\n                            required\n                        />\n                        <FormSemantic.Select\n                            className=\"mr-5\"\n                            fluid\n                            label='Тип пользователя'\n                            name=\"options\"\n                            options={this.state.userTypesOptions}\n                            onChange={this.handleUserOptionsChange}\n                            value={this.state.userTypeSelected}\n                            required\n                        />\n                        <FormSemantic.Select\n                            className=\"mr-5\"\n                            fluid\n                            label='Кабинет следователя'\n                            options={this.state.roomsTypesOptions}\n                            onChange={this.handleRoomOptionsChange}\n                            value={this.state.roomSelected}\n                            required\n                        />\n                    </FormSemantic.Group>\n                    <div className=\"form-group text-center\">\n                        <Button variant=\"primary\" type=\"submit\" className=\"mt-3\">\n                            Обновить данные\n                        </Button>\n                    </div>\n                </Form>\n            </div>\n        );\n    }\n\n    async getDepartmentsAndSetToState() {\n        await getDepartments()\n            .then(departments_list => {\n                this.setState({\n                    departments_options: this.mapListToSelectOptions(departments_list)\n                });\n            });\n    }\n\n    async getUserTypeAndSetToState() {\n        await getUserTypes()\n            .then(userLists => {\n                this.setState({\n                    userTypesOptions: this.mapListToSelectOptions(userLists)\n                })\n            })\n    }\n\n    async getRoomsAndSetToState() {\n        await getRoomsList()\n            .then(userLists => {\n                this.setState({\n                    roomsTypesOptions: this.mapListToSelectOptions(userLists)\n                })\n            })\n    }\n\n    mapListToSelectOptions(items_list) {\n        let itemsOptions = [];\n        items_list.forEach(item => itemsOptions.push({\n            key: item.id,\n            text: item.name,\n            value: item.name\n        }));\n        return itemsOptions.filter(items => items.text !== \"Супер Админ\");\n    }\n\n    onSubmit = async event => {\n        event.preventDefault();\n        const {\n            user_id, password, password2, first_name, last_name, departamentSelected,\n            userTypeSelected, roomSelected, selectedFile\n        } = this.state;\n        if (password !== password2) {\n            this.props.createMessage({passwordNotMatch: \"Пароли не совпадают\"})\n        } else {\n            if (departamentSelected === '' || userTypeSelected === ''\n                || roomSelected === '') {\n                this.props.createMessage({fillAllFields: \"Заполните все поля\"});\n                return;\n            }\n            const department = this.getSelectedItemId(departamentSelected, this.state.departments_options);\n            const userType = this.getSelectedItemId(userTypeSelected, this.state.userTypesOptions);\n            const roomId = this.getSelectedItemId(roomSelected, this.state.roomsTypesOptions);\n            const username = makeTwoStrToLowerCaseAndConcat(first_name, last_name);\n            const newUser = {\n                user_id: user_id,\n                username: username,\n                first_name: first_name,\n                last_name: last_name,\n                password: password,\n                department: department,\n                userType: userType,\n                room: roomId,\n                file: selectedFile\n            };\n\n            const result = await updateUser(newUser);\n            if(result) {\n                this.props.handleClick();\n            }\n        }\n    };\n\n    handleDepartmentChange = (e, {value}) => this.setState({departamentSelected: value});\n    handleUserOptionsChange = (e, {value}) => this.setState({userTypeSelected: value});\n    handleRoomOptionsChange = (e, {value}) => this.setState({roomSelected: value});\n\n    onSelectFileHandler = event => {\n        this.setState({\n            selectedFile: event.target.files[0]\n        })\n    };\n\n    getSelectedItemId(selectedItem, optionsList) {\n        return optionsList.find(item => item.text === selectedItem).key;\n    }\n\n    onChange = event => this.setState({\n        [event.target.name]: event.target.value\n    });\n}\n\nexport default connect(null, {createMessage})(UserInfoChangeForm);\n","import React, {Component} from 'react';\nimport {Button, Card, CardDeck, Container} from \"react-bootstrap\";\nimport {getUsersList} from \"../../helpers/api\";\nimport UserInfoChangeForm from \"./UserInfoChangeForm\";\n\nclass AllUsersList extends Component {\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    state = {\n        user: {},\n        usersListWithCards: [],\n        showUsersList: true,\n        showUserChangeForm: false,\n        selected_user_id: -1,\n        selected_user: {}\n    };\n\n    async componentDidMount() {\n        this.getUsersAndSetToState();\n    }\n\n    render() {\n        return (\n            <Container>\n                {this.state.showUsersList && this.state.usersListWithCards}\n                {this.state.showUserChangeForm &&\n                (<UserInfoChangeForm handleClick={this.handleClick}\n                                     selected_user={this.state.selected_user}/>)}\n            </Container>\n        );\n    }\n\n    async getUsersAndSetToState() {\n        await getUsersList()\n            .then(usersLists => {\n                let prevDepartment = '';\n                let usersListWithCards = (<div/>);\n                if (usersLists.length > 0) {\n                    usersListWithCards = usersLists.map(user_item => {\n                        const currentDepartment = user_item.department;\n                        return (<div key={user_item.user_id}>\n                            {currentDepartment !== prevDepartment ?\n                                (<h3 className=\"mt-3\">{prevDepartment = currentDepartment}</h3>) : (<div/>)}\n                            <CardDeck style={{display: 'flex', flexDirection: 'row', justifyContent: 'left'}}>\n                                <Card className=\"mt-3\" style={{flex: 1,}}>\n                                    <Card.Img className=\"profileImage\" variant=\"top\"\n                                              src={user_item.profileImage}\n                                              style={{width: '10em', height: '10em'}}/>\n                                    <Card.Body>\n                                        <Card.Title>{`${user_item.first_name} ${user_item.last_name}`}</Card.Title>\n                                        <Card.Text>\n                                            Должность: {user_item.userType}\n                                        </Card.Text>\n                                        <Card.Text>\n                                            Кабинет: {user_item.room}\n                                        </Card.Text>\n                                    </Card.Body>\n                                    <Button variant=\"primary\" style={{maxWidth: \"20%\"}}\n                                            user_id={user_item.user_id}\n                                            first_name={user_item.first_name}\n                                            last_name={user_item.last_name}\n                                            department={user_item.department}\n                                            room={user_item.room}\n                                            userType={user_item.userType}\n                                            onClick={this.goToUserProfileChange}>Изменить данные</Button>\n                                </Card>\n                            </CardDeck>\n                        </div>)\n                    });\n                    this.setState({\n                        usersListWithCards: usersListWithCards\n                    })\n                }\n            })\n    }\n\n    goToUserProfileChange = (event) => {\n        const user_id = parseInt(event.currentTarget.getAttribute(\"user_id\"));\n        const first_name = event.currentTarget.getAttribute(\"first_name\");\n        const last_name = event.currentTarget.getAttribute(\"last_name\");\n        const department = event.currentTarget.getAttribute(\"department\");\n        const room = event.currentTarget.getAttribute(\"room\");\n        const userType = event.currentTarget.getAttribute(\"userType\");\n\n        const selected_user = {\n            user_id, first_name, last_name, department, room, userType\n        };\n\n        this.setState({\n            showUsersList: false,\n            showUserChangeForm: true,\n            selected_user_id: user_id,\n            selected_user: selected_user\n        })\n    };\n\n    handleClick() {\n        this.setState({\n            showUsersList: true,\n            showUserChangeForm: false,\n        });\n        this.getUsersAndSetToState();\n\n    }\n}\n\nexport default AllUsersList;","import React from 'react';\nimport {connect} from 'react-redux';\nimport {Route, Redirect} from \"react-router-dom\";\n\nconst SuperAdminRoute = ({component: Component, auth, ...rest}) => (\n    <Route\n        {...rest}\n        render={props => {\n            if (auth.isLoading) {\n                return <h2>Loading...</h2>\n            } else if (!auth.isAuthenticated) {\n                return <Redirect to=\"/login\"/>\n            } else if(auth.user_type === \"Супер Админ\") {\n                return <Component {...props}/>\n            } else {\n                return <Redirect to=\"/\"/>\n            }\n        }}\n    />\n);\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps)(SuperAdminRoute);","import React, {Component} from 'react'\nimport {Button, Container, Divider, Table} from 'semantic-ui-react'\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {getRecords, adminRemoveRecord} from \"../../store/actions/records\";\nimport {Link} from \"react-router-dom\";\nimport {addSelectedRecordToStory} from \"../../store/actions/recordDetails\";\nimport {confirmAlert} from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\n\nclass RecordsList extends Component {\n    state = {\n        deleteConfirmOpen: false,\n        selectedRecordId: -1\n    };\n\n    static propTypes = {\n        records: PropTypes.array.isRequired,\n        user_type: PropTypes.string.isRequired,\n        user_info: PropTypes.object.isRequired,\n        getRecords: PropTypes.func,\n        addSelectedRecordToStory: PropTypes.func,\n        adminRemoveRecord: PropTypes.func\n    };\n\n    componentDidMount() {\n        this.props.getRecords();\n    }\n\n    render() {\n        const recordsList = this.identifyUserTypeAndGetRecord();\n\n        return (\n            <Container>\n                <Divider/>\n                <h3>Дела на удалении</h3>\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>ID дела</Table.HeaderCell>\n                            <Table.HeaderCell>Краткое описание</Table.HeaderCell>\n                            <Table.HeaderCell>Создатель дела</Table.HeaderCell>\n                            <Table.HeaderCell>Дата создания</Table.HeaderCell>\n                            <Table.HeaderCell>Подробнее о деле</Table.HeaderCell>\n                            <Table.HeaderCell>Действия</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {recordsList}\n                    </Table.Body>\n                    <Divider/>\n                </Table>\n            </Container>\n        )\n    }\n\n    MoreInfoLinkOnClickHandler = (event) => {\n        const selectedRecordId = parseInt(event.currentTarget.parentNode.getAttribute(\"record_id\"));\n        const selectedRecord = this.props.records.find(record_item =>\n            record_item.id === selectedRecordId);\n        this.props.addSelectedRecordToStory(selectedRecord);\n    };\n\n    identifyUserTypeAndGetRecord() {\n        const {records, user_type} = this.props;\n        if (records.length > 0 && user_type) {\n            if (user_type === \"Супер Админ\") {\n                return this.getSuperAdminRecord();\n            }\n        }\n    }\n\n    getSuperAdminRecord() {\n        const buttonRemoveAndConform = this.getRemoveAndConfirmButton();\n        return this.props.records.map(record => {\n            if (record.status === 'o') {\n                return (\n                    <Table.Row key={record.id}>\n                        <Table.Cell>\n                            {record.record_id}\n                        </Table.Cell>\n                        <Table.Cell>\n                            {record.short_description}\n                        </Table.Cell>\n                        <Table.Cell>\n                            {`${record.first_name} ${record.last_name}`}\n                        </Table.Cell>\n                        <Table.Cell>\n                            {new Date(record.created_at).toLocaleString('ru-RU')}\n                        </Table.Cell>\n                        <Table.Cell record_id={record.id}>\n                            <Link onClick={this.MoreInfoLinkOnClickHandler} to=\"/detail\">Подробнее</Link>\n                        </Table.Cell>\n                        <Table.Cell record_id={record.id}>\n                            {buttonRemoveAndConform}\n                        </Table.Cell>\n                    </Table.Row>)\n            }\n            return <Table.Row/>;\n        })\n    }\n\n    getRemoveAndConfirmButton() {\n        return (<Button negative onClick={this.deleteRecordSubmit}>Удалить Дело</Button>);\n    }\n\n    deleteRecordSubmit = (event) => {\n        const selectedRecordId =\n            parseInt(event.currentTarget.parentNode.getAttribute(\"record_id\"));\n        this.setState({selectedRecordId: selectedRecordId});\n        confirmAlert({\n            title: 'Удаление дела',\n            message: 'Вы действительно хотите удалить дело?',\n            buttons: [\n                {\n                    label: 'Да',\n                    onClick: () => {\n                        const selectedRecordId = this.state.selectedRecordId;\n                        this.props.adminRemoveRecord(selectedRecordId);\n                    }\n                },\n                {\n                    label: 'Нет',\n                    onClick: () => {\n                    }\n                }\n            ]\n        });\n    };\n\n}\n\nconst mapStateToProps = state => ({\n    records: state.records.records,\n    user_type: state.auth.user_type,\n    user_info: state.auth.user_info,\n    user: state.auth.user\n});\nexport default connect(mapStateToProps, {getRecords, addSelectedRecordToStory, adminRemoveRecord})(RecordsList);","import React, {Component} from 'react';\nimport {Button, Container, Divider, Form, Table} from \"semantic-ui-react\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {\n    addRecordDetail, getAllRecordsDetails,\n    playRecordDetail, stopRecordDetail,\n    deleteRecordDetail\n} from \"../../store/actions/recordDetails\";\nimport {getSubCategories} from \"../../helpers/api\";\nimport {uploadRecordDetailFileToServer} from \"../../store/actions/files\";\n\nimport '../../style/RecordDetail.css';\nimport {confirmAlert} from \"react-confirm-alert\";\n\n\nclass DeleteRecordDetailList extends Component {\n    state = {\n        sub_category_options: [],\n        short_description: '',\n        subCategorySelected: '',\n        deleteConfirmOpen: false,\n        selectedRecordId: -1,\n        selectedFile: null\n    };\n\n    static propTypes = {\n        selectedRecord: PropTypes.array.isRequired,\n        recordDetails: PropTypes.array.isRequired,\n        getRecords: PropTypes.func,\n        getRecordDetails: PropTypes.func,\n        playRecordDetail: PropTypes.func,\n        stopRecordDetail: PropTypes.func,\n        deleteRecordDetail: PropTypes.func,\n        auth: PropTypes.object.isRequired,\n    };\n\n    componentDidMount = async () => {\n        this.props.getAllRecordsDetails();\n        this.getSubCategoriesAndSetToState();\n    };\n\n    render() {\n        const {user_info} = this.props.auth;\n\n        const buttonRemoveAndConform = (\n            <Button negative onClick={this.showRemoveConfirm}>Удалить файл</Button>);\n\n        return (\n            <Container>\n                <Divider/>\n                <h3>Файлы для удаления</h3>\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>ID дела</Table.HeaderCell>\n                            <Table.HeaderCell>Подкатегория</Table.HeaderCell>\n                            <Table.HeaderCell>Краткое описание</Table.HeaderCell>\n                            <Table.HeaderCell>Дата создания</Table.HeaderCell>\n                            <Table.HeaderCell>Действие</Table.HeaderCell>\n                            <Table.HeaderCell>Ссылка для скачивания</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n\n                    {this.props.recordDetails.length > 0 ? <Table.Body>\n                        {\n                            this.props.recordDetails.map(record_detail_item => {\n                                if (record_detail_item.record_detail_status === 'o')\n                                    return (\n                                        <Table.Row key={record_detail_item.id}>\n                                            <Table.Cell>\n                                                {record_detail_item.record_id}\n                                            </Table.Cell>\n                                            <Table.Cell>\n                                                {record_detail_item.category_id}\n                                            </Table.Cell>\n                                            <Table.Cell>\n                                                {record_detail_item.short_description}\n                                            </Table.Cell>\n                                            <Table.Cell>\n                                                {new Date(record_detail_item.created_at).toLocaleString('ru-RU')}\n                                            </Table.Cell>\n                                            <Table.Cell record_detail_id={record_detail_item.id}>\n                                                {user_info ? (<div>\n                                                    {buttonRemoveAndConform}\n                                                </div>)\n                                                    : <div/>}\n\n                                            </Table.Cell>\n                                            <Table.Cell>\n                                                {record_detail_item.file ?\n                                                    <a href={`http://localhost:8000${record_detail_item.file}`}\n                                                       download>Скачать</a> :\n                                                    <div/>}\n                                            </Table.Cell>\n                                        </Table.Row>\n                                    )\n                                return <div/>\n                            })\n                        }\n                    </Table.Body> : <div/>\n                    }\n                </Table>\n                {user_info ? (user_info.userType.id === 3 && (\n                    <div>\n                        <h3>Создание Покатегории</h3>\n                        <Form onSubmit={this.onSubmit}>\n                            <Form.Group>\n                                <Form.Select\n                                    label='Покатегории'\n                                    options={this.state.sub_category_options}\n                                    onChange={this.handleCategorySelectOption}\n                                    required/>\n                            </Form.Group>\n                            <Form.TextArea name=\"short_description\" label='Краткое описание'\n                                           placeholder='Напишите краткое описание дела'\n                                           value={this.state.short_description} onChange={this.handleChange}/>\n                            <Form.Button primary>Создать</Form.Button>\n                        </Form>\n                    </div>\n                )) : <span/>}\n\n            </Container>\n        );\n    }\n\n    handleCategorySelectOption = (e, {value}) => this.setState({subCategorySelected: value});\n\n    async getSubCategoriesAndSetToState() {\n        await getSubCategories()\n            .then(departments_list => {\n                this.setState({\n                    sub_category_options: this.mapListToSelectOptions(departments_list)\n                });\n            });\n    }\n\n    mapListToSelectOptions(items_list) {\n        let itemsOptions = [];\n        items_list.forEach(item => itemsOptions.push({\n            key: item.id,\n            text: item.title,\n            value: item.title\n        }));\n        return itemsOptions;\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    };\n\n    onSubmit = async event => {\n        event.preventDefault();\n        const {subCategorySelected, short_description} = this.state;\n        const record_id = this.props.selectedRecord.id;\n        const category_id = this.getSelectedItemId(subCategorySelected,\n            this.state.sub_category_options);\n        await addRecordDetail(record_id,\n            short_description, category_id);\n\n    };\n\n    getSelectedItemId(selectedItem, optionsList) {\n        return optionsList.find(item => item.text === selectedItem).key;\n    }\n\n    showRemoveConfirm = (event) => {\n        const selectedRecordId =\n            parseInt(event.currentTarget.parentNode.parentNode.getAttribute(\"record_detail_id\"));\n        this.setState({deleteConfirmOpen: true, selectedRecordId: selectedRecordId});\n        confirmAlert({\n            title: 'Удаление файла',\n            message: 'Вы действительно хотите удалить файл?',\n            buttons: [\n                {\n                    label: 'Да',\n                    onClick: () => {\n                        const selectedRecordId = this.state.selectedRecordId;\n                        this.props.deleteRecordDetail(selectedRecordId);\n                    }\n                },\n                {\n                    label: 'Нет',\n                    onClick: () => {\n                    }\n                }\n            ]\n        });\n    };\n\n    onSelectFileHandler = event => {\n        this.setState({\n            selectedFile: event.target.files[0]\n        })\n    };\n\n    uploadVideoOnClickHandler = (event) => {\n        if (this.state.selectedFile !== null) {\n            const selectedRecordDetailId =\n                parseInt(event.currentTarget.parentNode.parentNode.parentNode.getAttribute(\"record_detail_id\"));\n            this.props.uploadRecordDetailFileToServer(this.state.selectedFile, selectedRecordDetailId);\n        }\n    }\n}\n\nconst mapStateToProps = state => ({\n    selectedRecord: state.recordDetails.selectedRecord,\n    recordDetails: state.recordDetails.recordDetails,\n    room: state.auth.user_info.room,\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps,\n    {\n        getAllRecordsDetails,\n        playRecordDetail,\n        stopRecordDetail,\n        deleteRecordDetail,\n        uploadRecordDetailFileToServer\n    })(DeleteRecordDetailList);","import React, { Component } from 'react';\nimport {  Card, CardDeck, Container } from \"react-bootstrap\";\nimport { getUsersList } from \"../../helpers/api\";\n\nclass AllDepartmentUsers extends Component {\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    state = {\n        user: {},\n        usersListWithCards: [],\n        showUsersList: true,\n        showUserChangeForm: false,\n        selected_user_id: -1,\n        selected_user: {}\n    };\n\n    async componentDidMount() {\n        this.getUsersAndSetToState();\n    }\n\n    render() {\n        return (\n            <Container>\n                {this.state.showUsersList && this.state.usersListWithCards}\n            </Container>\n        );\n    }\n\n    async getUsersAndSetToState() {\n        let department = localStorage.getItem('department')\n        await getUsersList()\n            .then(usersLists => {\n                console.log(usersLists)\n                let prevDepartment = '';\n                let usersListWithCards = (<div />);\n                if (usersLists.length > 0) {\n                    usersListWithCards = usersLists.map(user_item => {\n                        if (user_item.department === department) {\n                            const currentDepartment = user_item.department;\n                            return (<div key={user_item.user_id}>\n                                {currentDepartment !== prevDepartment ?\n                                    (<h3 className=\"mt-3\">{prevDepartment = currentDepartment}</h3>) : (<div />)}\n                                <CardDeck style={{ display: 'flex', flexDirection: 'row', justifyContent: 'left' }}>\n                                    <Card className=\"mt-3\" style={{ flex: 1, }}>\n                                        <Card.Img className=\"profileImage\" variant=\"top\"\n                                            src={user_item.profileImage}\n                                            style={{ width: '10em', height: '10em' }} />\n                                        <Card.Body>\n                                            <Card.Title>{`${user_item.first_name} ${user_item.last_name}`}</Card.Title>\n                                            <Card.Text>\n                                                Должность: {user_item.userType}\n                                            </Card.Text>\n                                            <Card.Text>\n                                                Кабинет: {user_item.room}\n                                            </Card.Text>\n                                        </Card.Body>\n                                        {/* <Button variant=\"primary\" style={{ maxWidth: \"20%\" }}\n                                            user_id={user_item.user_id}\n                                            first_name={user_item.first_name}\n                                            last_name={user_item.last_name}\n                                            department={user_item.department}\n                                            room={user_item.room}\n                                            userType={user_item.userType}\n                                            onClick={this.goToUserProfileChange}>Изменить данные</Button> */}\n                                    </Card>\n                                </CardDeck>\n                            </div>)\n                        }\n                        return <div/>\n                    });\n                    this.setState({\n                        usersListWithCards: usersListWithCards\n                    })\n                }\n            })\n    }\n\n    // goToUserProfileChange = (event) => {\n    //     const user_id = parseInt(event.currentTarget.getAttribute(\"user_id\"));\n    //     const first_name = event.currentTarget.getAttribute(\"first_name\");\n    //     const last_name = event.currentTarget.getAttribute(\"last_name\");\n    //     const department = event.currentTarget.getAttribute(\"department\");\n    //     const room = event.currentTarget.getAttribute(\"room\");\n    //     const userType = event.currentTarget.getAttribute(\"userType\");\n\n    //     const selected_user = {\n    //         user_id, first_name, last_name, department, room, userType\n    //     };\n\n    //     this.setState({\n    //         showUsersList: false,\n    //         showUserChangeForm: true,\n    //         selected_user_id: user_id,\n    //         selected_user: selected_user\n    //     })\n    // };\n\n    handleClick() {\n        this.setState({\n            showUsersList: true,\n            showUserChangeForm: false,\n        });\n        this.getUsersAndSetToState();\n\n    }\n}\n\nexport default AllDepartmentUsers;","import React, { Component, Fragment } from 'react';\n\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from \"react-alert-template-basic\";\n\nimport { Provider } from 'react-redux';\nimport store from \"./store/store\";\n\nimport Header from \"./components/layout/Header\";\nimport Main from \"./components/Main\";\nimport Alerts from \"./components/layout/Alerts\";\nimport Login from \"./components/accounts/Login\";\nimport Register from \"./components/accounts/Register\";\nimport PrivateRoute from \"./components/common/PrivateRoute\";\nimport { loadUser } from \"./store/actions/auth\";\nimport RecordDetail from \"./components/recordDetails/RecordDetail\";\n\nimport './App.css';\nimport ChangePassword from \"./components/accounts/ChangePassword\";\nimport AllUsersList from \"./components/user/AllUsersList\";\nimport SuperAdminRoute from \"./components/common/SuperAdminRoute\";\nimport DeleteRecordList from \"./components/admin/DeleteRecordList\";\nimport DeleteRecordDetailList from \"./components/admin/DeleteRecordDetailList\";\nimport AllDepartmentUsers from \"./components/departmentHead/AllDepartmentUsers\";\n// ALERT OPTIONS\nconst alertOptions = {\n    timeout: 2500,\n    position: 'top center'\n};\n\nexport default class App extends Component {\n    componentDidMount() {\n        store.dispatch(loadUser());\n    }\n\n    render() {\n        return (\n            <Provider store={store}>\n                <AlertProvider template={AlertTemplate}\n                    {...alertOptions}>\n                    <Router>\n                        <Fragment>\n                            <Header />\n                            <Alerts />\n                            <Switch>\n                                <Route exact path=\"/login\" component={Login} />\n                                <SuperAdminRoute exact path=\"/register\" component={Register} />\n                                <PrivateRoute exact path=\"/detail\" component={RecordDetail} />\n                                <PrivateRoute exact path=\"/\" component={Main} />\n                                <PrivateRoute exact path=\"/changepassword\" component={ChangePassword} />\n                                <PrivateRoute exact path=\"/allDepartmentUsers\" component={AllDepartmentUsers} />\n                                <SuperAdminRoute exact path=\"/allusers\" component={AllUsersList} />\n                                <SuperAdminRoute exact path=\"/deleteRecord\" component={DeleteRecordList} />\n                                <SuperAdminRoute exact path=\"/deleteRecordDetail\" component={DeleteRecordDetailList} />\n                            </Switch>\n                        </Fragment>\n                    </Router>\n                </AlertProvider>\n            </Provider>\n        )\n    }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}